generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  role          UserRole       @default(PATIENT)
  hospitalId    String? // if needed
  prescriptions Prescription[]
  orders        Order[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Notification  Notification[]
}

enum UserRole {
  HOSPITAL_ADMIN
  DOCTOR
  PATIENT
}

model Product {
  id                     String           @id @default(uuid())
  title                  String
  description            String?
  sku                    String?          @unique
  priceCents             Int
  isPrescriptionRequired Boolean          @default(false)
  isEmergencyItem        Boolean?         @default(false)
  isTaxExempt            Boolean          @default(false)
  variants               Variant[]
  certifications         Certification[]
  inventory              Int
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  Prescription           Prescription[]
  Category               Category?        @relation(fields: [categoryId], references: [id])
  categoryId             String?
  ProductVariant         ProductVariant[]
  BulkPricing            BulkPricing[]
  InventoryAlert         InventoryAlert[]
}

model Variant {
  id              String  @id @default(uuid())
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  name            String
  extraPriceCents Int     @default(0)
  attributes      Json?
}

model Certification {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  filename  String
  url       String
  issuedBy  String?
}

model Prescription {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  product   Product            @relation(fields: [productId], references: [id])
  productId String
  filePath  String
  status    PrescriptionStatus @default(PENDING)
  createdAt DateTime           @default(now())
}

enum PrescriptionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  totalCents  Int
  status      OrderStatus @default(PENDING)
  isEmergency Boolean     @default(false)
  isTaxExempt Boolean     @default(false)
  createdAt   DateTime    @default(now())
  items       OrderItem[]
}

model OrderItem {
  id             String  @id @default(uuid())
  order          Order   @relation(fields: [orderId], references: [id])
  orderId        String
  productId      String
  variantId      String?
  qty            Int
  unitPriceCents Int
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
  COMPLETED
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  userId    String?
  details   Json?
  createdAt DateTime @default(now())
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  slug        String     @unique
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])

  size            String?
  model           String?
  certifications  String[] // e.g., ["FDA", "CE"]
  additionalPrice Decimal? @db.Decimal(12, 2)
}

model BulkPricing {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  hospitalId String?
  minQty     Int
  priceCents Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model InventoryAlert {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  threshold Int
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., "LOW_STOCK", "EMERGENCY_ORDER"
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
